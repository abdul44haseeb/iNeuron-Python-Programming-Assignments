Question1. Write a function that stutters a word as if someone is struggling to read it. The
first two letters are repeated twice with an ellipsis ... and space after each, and then the
word is pronounced with a question mark ?.
Examples
stutter("incredible";) ➞ "in... in... incredible?"
stutter("enthusiastic") ➞ "en... en... enthusiastic?"
stutter("outstanding") ➞ "ou... ou... outstanding?"

Hint :- Assume all input is in lower case and at least two characters long.

Solution:

def stutter(word):
    first_two_letters = word[:2]
    stuttered_word = f"{first_two_letters}... {first_two_letters}... {word}?"
    return stuttered_word

# Example usage
print(stutter("incredible"))  # "in... in... incredible?"
print(stutter("enthusiastic"))  # "en... en... enthusiastic?"
print(stutter("outstanding"))  # "ou... ou... outstanding?"



Question 2.Create a function that takes an angle in radians and returns the corresponding
angle in degrees rounded to one decimal place.
Examples
radians_to_degrees(1) ➞ 57.3
radians_to_degrees(20) ➞ 1145.9
radians_to_degrees(50) ➞ 2864.8

Solution:

To convert an angle from radians to degrees, we can use the following formula:

degrees = radians * (180 / pi)

where "pi" is the mathematical constant representing the ratio of the circumference of a circle to its diameter (approximately 3.14159).

import math

def radians_to_degrees(radians):
    degrees = radians * (180 / math.pi)
    rounded_degrees = round(degrees, 1)
    return rounded_degrees

# Example usage
print(radians_to_degrees(1))  # 57.3
print(radians_to_degrees(20))  # 1145.9
print(radians_to_degrees(50))  # 2864.8



Question 3. In this challenge, establish if a given integer num is a Curzon number. If 1 plus
2 elevated to num is exactly divisible by 1 plus 2 multiplied by num, then num is a Curzon
number.
Given a non-negative integer num, implement a function that returns True if num is a Curzon
number, or False otherwise.
Examples
is_curzon(5) ➞ True
# 2 ** 5 + 1 = 33
# 2 * 5 + 1 = 11
# 33 is a multiple of 11
is_curzon(10) ➞ False
# 2 ** 10 + 1 = 1025
# 2 * 10 + 1 = 21
# 1025 is not a multiple of 21
is_curzon(14) ➞ True
# 2 ** 14 + 1 = 16385
# 2 * 14 + 1 = 29
# 16385 is a multiple of 29

Solution:

To determine if a given integer num is a Curzon number, we need to check if 2 ** num + 1 is divisible by 2 * num + 1.
def is_curzon(num):
    numerator = 2 ** num + 1
    denominator = 2 * num + 1

    if numerator % denominator == 0:
        return True
    else:
        return False

# Example usage
print(is_curzon(5))  # True
print(is_curzon(10))  # False
print(is_curzon(14))  # True



Question 4.Given the side length x find the area of a hexagon.
if side length is S, then area ,A =3*sqrt(3) * S**2/2

Examples
area_of_hexagon(1) ➞ 2.6
area_of_hexagon(2) ➞ 10.4
area_of_hexagon(3) ➞ 23.4

import math

def area_of_hexagon(side_length):
    area = (3 * math.sqrt(3) * side_length ** 2) / 2
    return round(area, 1)

# Example usage
print(area_of_hexagon(1))  # 2.6
print(area_of_hexagon(2))  # 10.4
print(area_of_hexagon(3))  # 23.4



Question 5. Create a function that returns a base-2 (binary) representation of a base-10
(decimal) string number. To convert is simple: ((2) means base-2 and (10) means base-10)
010101001(2) = 1 + 8 + 32 + 128.

Going from right to left, the value of the most right bit is 1, now from that every bit to the left
will be x2 the value, value of an 8 bit binary numbers are (256, 128, 64, 32, 16, 8, 4, 2, 1).
Examples
binary(1) ➞ "1"
# 1*1 = 1
binary(5) ➞ "101"
# 1*1 + 1*4 = 5
binary(10) ➞ "1010"
# 1*2 + 1*8 = 10

To convert a decimal number to a binary representation, we can use the following algorithm:

Initialize an empty string to store the binary representation.
Perform a repeated division of the decimal number by 2 until the quotient becomes 0.
Append the remainder (0 or 1) to the left side of the binary representation string.
Reverse the binary representation string to get the final result.

def binary(decimal):
    if decimal == 0:
        return "0"

    binary_repr = ""
    while decimal > 0:
        remainder = decimal % 2
        binary_repr += str(remainder)
        decimal //= 2

    return binary_repr[::-1]

# Example usage
print(binary(1))   # "1"
print(binary(5))   # "101"
print(binary(10))  # "1010"

