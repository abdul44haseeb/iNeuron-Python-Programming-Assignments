1. Assign the value 7 to the variable guess_me. Then, write the conditional tests (if, else, and elif) to
print the string 'too low' if guess_me is less than 7, 'too high' if greater than 7, and 'just right' if equal
to 7.

guess_me = 7

if guess_me < 7:
    print('too low')
elif guess_me > 7:
    print('too high')
else:
    print('just right')

the output will be: just right



2. Assign the value 7 to the variable guess_me and the value 1 to the variable start. Write a while
loop that compares start with guess_me. Print too low if start is less than guess me. If start equals
guess_me, print 'found it!' and exit the loop. If start is greater than guess_me, print 'oops' and exit
the loop. Increment start at the end of the loop.

guess_me = 7
start = 1

while True:
    if start < guess_me:
        print('too low')
    elif start == guess_me:
        print('found it!')
        break
    else:
        print('oops')
        break
    
    start += 1



3. Print the following values of the list [3, 2, 1, 0] using a for loop.

To print the values of the list [3, 2, 1, 0] using a for loop, you can iterate over the elements of the list and print each element. 
my_list = [3, 2, 1, 0]

for value in my_list:
    print(value)

In this code, the for loop iterates over each element value in the my_list list. The print() function is used to print each element value in a separate line.

it will output: 

3
2
1
0



4. Use a list comprehension to make a list of the even numbers in range(10)


To create a list of the even numbers in the range from 0 to 9 (range(10)) using a list comprehension, we can include a conditional statement to filter out the odd numbers. 
even_numbers = [num for num in range(10) if num % 2 == 0]
print(even_numbers)

it will output: [0, 2, 4, 6, 8]
The even_numbers list contains the even numbers from 0 to 9, which are [0, 2, 4, 6, 8].


5. Use a dictionary comprehension to create the dictionary squares. Use range(10) to return the
keys, and use the square of each key as its value.


To create a dictionary squares using a dictionary comprehension, where the keys are the numbers from 0 to 9 (using range(10)), and the values are the squares of each key, you can square each key within the comprehension.
squares = {num: num ** 2 for num in range(10)}
print(squares)
it will output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}



6. Construct the set odd from the odd numbers in the range using a set comprehension (10).

To create a set odd using a set comprehension that includes only the odd numbers from the range 0 to 9 (using range(10)), we can include a conditional statement to filter out the even numbers.
odd = {num for num in range(10) if num % 2 != 0}
print(odd)

it will output:{1, 3, 5, 7, 9}



7. Use a generator comprehension to return the string 'Got' and a number for the numbers in
range(10). Iterate through this by using a for loop.

generator = ('Got ' + str(num) for num in range(10))

for item in generator:
    print(item)

 it will output: 
Got 0
Got 1
Got 2
Got 3
Got 4
Got 5
Got 6
Got 7
Got 8
Got 9



8. Define a function called good that returns the list ['Harry', 'Ron', 'Hermione'].


To define a function called good that returns the list ['Harry', 'Ron', 'Hermione'], we can use the def keyword in Python. 

def good():
    return ['Harry', 'Ron', 'Hermione']

We can then call the good function to obtain the desired list:
result = good()
print(result)

['Harry', 'Ron', 'Hermione']



9. Define a generator function called get_odds that returns the odd numbers from range(10). Use a
for loop to find and print the third value returned.

To define a generator function called get_odds that yields the odd numbers from the range 0 to 9 (using range(10)), we can use the yield keyword in Python. 
def get_odds():
    for num in range(10):
        if num % 2 != 0:
            yield num

count = 0
for value in get_odds():
    count += 1
    if count == 3:
        print(value)
        break

 it will output:5



10. Define an exception called OopsException. Raise this exception to see what happens. Then write
the code to catch this exception and print 'Caught an oops'.

To define an exception called OopsException and raise this exception to see what happens, we can use the raise statement.

class OopsException(Exception):
    pass

raise OopsException

To catch the OopsException and print 'Caught an oops', you can use a try and except block. Here's an example:

class OopsException(Exception):
    pass

try:
    raise OopsException
except OopsException:
    print('Caught an oops')

it will output: Caught an oops



11. Use zip() to make a dictionary called movies that pairs these lists: titles = ['Creature of Habit',
'Crewel Fate'] and plots = ['A nun turns into a monster', 'A haunted yarn shop'].

To use the zip() function to create a dictionary called movies that pairs the lists titles and plots, we can pass the lists to the zip() function and convert the result into a dictionary. 

titles = ['Creature of Habit', 'Crewel Fate']
plots = ['A nun turns into a monster', 'A haunted yarn shop']

movies = dict(zip(titles, plots))
print(movies)

it will output: {'Creature of Habit': 'A nun turns into a monster', 'Crewel Fate': 'A haunted yarn shop'}


