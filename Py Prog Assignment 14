Question 1:
Define a class with a generator which can iterate the numbers, which are divisible by
7, between a given range 0 and n.

class DivisibleBySevenGenerator:
    def __init__(self, n):
        self.n = n

    def divisible_by_seven(self):
        for num in range(self.n + 1):
            if num % 7 == 0:
                yield num

# Example usage
n = int(input("Enter the upper limit: "))
generator = DivisibleBySevenGenerator(n)

for num in generator.divisible_by_seven():
    print(num)



Question 2:
Write a program to compute the frequency of the words from the input. The output
should output after sorting the key alphanumerically.
Suppose the following input is supplied to the program:
New to Python or choosing between Python 2 and Python 3? Read Python 2 or
Python 3.
Then, the output should be:
2:2
3.:1
3?:1
New:1
Python:5
Read:1
and:1
between:1
choosing:1
or:2
to:1


Solution:

def word_frequency(input_string):
    words = input_string.split()
    word_count = {}

    for word in words:
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1

    sorted_word_count = sorted(word_count.items(), key=lambda x: x[0])

    for word, count in sorted_word_count:
        print(f"{word}:{count}")


input_string = input("Enter a sentence: ")
word_frequency(input_string)



Question 3:

Define a class Person and its two child classes: Male and Female. All classes have a
method 'getGender' which can print 'Male' for Male class and 'Female' for Female
class.

Solution:
class Person:
    def getGender(self):
        print("Unknown")


class Male(Person):
    def getGender(self):
        print("Male")


class Female(Person):
    def getGender(self):
        print("Female")


# Example usage
person = Person()
person.getGender()  # Output: Unknown

male = Male()
male.getGender()  # Output: Male

female = Female()
female.getGender()  # Output: Female



Question 4:
Please write a program to generate all sentences where subject is in ["I", "You"] and
verb is in ["Play", "Love"] and the object is in ["Hockey","Football"].

subjects = ["I", "You"]
verbs = ["Play", "Love"]
objects = ["Hockey", "Football"]

sentences = []

for subject in subjects:
    for verb in verbs:
        for obj in objects:
            sentence = subject + " " + verb + " " + obj
            sentences.append(sentence)

# Print all generated sentences
for sentence in sentences:
    print(sentence)

Output:
I Play Hockey
I Play Football
I Love Hockey
I Love Football
You Play Hockey
You Play Football
You Love Hockey
You Love Football



Question 5:
Please write a program to compress and decompress the string "hello world!hello
world!hello world!hello world!"

import gzip

def compress_string(string):
    compressed_data = gzip.compress(string.encode())
    return compressed_data

def decompress_string(compressed_data):
    decompressed_data = gzip.decompress(compressed_data)
    return decompressed_data.decode()

# Original string
original_string = "hello world!hello world!hello world!hello world!"
print("Original string:", original_string)

# Compress the string
compressed_data = compress_string(original_string)
print("Compressed data:", compressed_data)

# Decompress the data
decompressed_string = decompress_string(compressed_data)
print("Decompressed string:", decompressed_string)

Output:
Original string: hello world!hello world!hello world!hello world!
Compressed data: b'\x1f\x8b\x08\x00\xcb\x16\xe5V\x02\xff\xcbH\xcd\xc9\xc9W\x08\xcf/\xcaIQ\x04\x00\xaf\xb8\xf4\x1a\x00\x00\x00'
Decompressed string: hello world!hello world!hello world!hello world!


Question 6:
Please write a binary search function which searches an item in a sorted list. The
function should return the index of element to be searched in the list.

def binary_search(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1  # Element not found

# Example usage
sorted_list = [2, 4, 7, 10, 15, 19, 23, 28, 31, 36]
target_element = 15

result = binary_search(sorted_list, target_element)

if result != -1:
    print("Element found at index:", result)
else:
    print("Element not found in the list.")

Output:
Element found at index: 4




