1. Create a list called years_list, starting with the year of your birth, and each year thereafter until
the year of your fifth birthday. For example, if you were born in 1980. the list would be years_list =
[1980, 1981, 1982, 1983, 1984, 1985].

birth_year = int(input("Enter your year of birth: "))
years_list = [year for year in range(birth_year, birth_year + 6)]
print(years_list)


2. In which year in years_list was your third birthday? Remember, you were 0 years of age for your
first year.

birth_year = years_list[0]


3.In the years list, which year were you the oldest?

oldest_year = max(years_list)
print("The year when you were the oldest: ", oldest_year)


4. Make a list called things with these three strings as elements: "mozzarella", "cinderella",
"salmonella".

things = ["mozzarella", "cinderella", "salmonella"]
print(things)

In this code, the list things is created with the three strings as its elements. The list is then printed to the console.
it will output: ['mozzarella', 'cinderella', 'salmonella']



5. Capitalize the element in things that refers to a person and then print the list. Did it change the
element in the list?

To capitalize the element in the things list that refers to a person ("cinderella") and then print the updated list, we can use the capitalize() method.
things = ["mozzarella", "cinderella", "salmonella"]
things[1] = things[1].capitalize()
print(things)

 it will output: ['mozzarella', 'Cinderella', 'salmonella']



6. Make a surprise list with the elements "Groucho"; "Chico"; and "Harpo".

surprise = ["Groucho", "Chico", "Harpo"]
print(surprise)
it will output: ['Groucho', 'Chico', 'Harpo']



7. Lowercase the last element of the surprise list, reverse it, and then capitalize it.

To perform the operations of lowercase, reverse, and capitalize on the last element of the surprise list, we can use a combination of string methods and list indexing.
surprise = ["Groucho", "Chico", "Harpo"]

# Lowercase the last element
surprise[-1] = surprise[-1].lower()

# Reverse the last element
surprise[-1] = surprise[-1][::-1]

# Capitalize the last element
surprise[-1] = surprise[-1].capitalize()

print(surprise)

In this code, surprise[-1] refers to the last element in the surprise list, which is "Harpo". The string methods are then applied in sequence:

lower() is used to convert the last element to lowercase.
[::-1] is used to reverse the order of characters in the last element.
capitalize() is used to capitalize the first letter of the last element.
Finally, the surprise list is printed to the console.

 it will output:['Groucho', 'Chico', 'Oprah']



8. Make an English-to-French dictionary called e2f and print it. Here are your starter words: dog is
chien, cat is chat, and walrus is morse.

To create an English-to-French dictionary called e2f with the provided starter words, we can use a dictionary literal with key-value pairs.
e2f = {
    'dog': 'chien',
    'cat': 'chat',
    'walrus': 'morse'
}

print(e2f)

In this code, the e2f dictionary is created with the English words as keys and their corresponding French translations as values. The dictionary is then printed to the console.

{'dog': 'chien', 'cat': 'chat', 'walrus': 'morse'}



9. Write the French word for walrus in your three-word dictionary e2f.

To retrieve the French word for "walrus" from the e2f dictionary, we can use dictionary indexing with the English word "walrus" as the key.
e2f = {
    'dog': 'chien',
    'cat': 'chat',
    'walrus': 'morse'
}

french_word = e2f['walrus']
print(french_word)

it will output: morse


10. Make a French-to-English dictionary called f2e from e2f. Use the items method.

To create a French-to-English dictionary called f2e from the e2f dictionary, we can use the items() method to iterate over the key-value pairs in e2f and swap them to create the new dictionary.

e2f = {
    'dog': 'chien',
    'cat': 'chat',
    'walrus': 'morse'
}

f2e = {french: english for english, french in e2f.items()}
print(f2e)



11. Print the English version of the French word chien using f2e.

f2e = {
    'chien': 'dog',
    'chat': 'cat',
    'morse': 'walrus'
}

english_word = f2e['chien']
print(english_word)

it will output: dog



12. Make and print a set of English words from the keys in e2f.

e2f = {
    'dog': 'chien',
    'cat': 'chat',
    'walrus': 'morse'
}

english_words = set(e2f.keys())
print(english_words)

 it will output: {'dog', 'walrus', 'cat'}



13. Make a multilevel dictionary called life. Use these strings for the topmost keys: 'animals', 'plants',
and 'other'. Make the 'animals' key refer to another dictionary with the keys 'cats', 'octopi', and
'emus'. Make the 'cats' key refer to a list of strings with the values 'Henri', 'Grumpy', and 'Lucy'.
Make all the other keys refer to empty dictionaries.

life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

print(life)


Apologies for the incorrect response in my previous message. Here's the corrected code to create the life multilevel dictionary according to the provided structure:

python
Copy code
life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

print(life)
In this code, the life dictionary is created with the desired structure:

The topmost keys are 'animals', 'plants', and 'other'.
The 'animals' key refers to another dictionary with the keys 'cats', 'octopi', and 'emus'.
The 'cats' key refers to a list of strings ['Henri', 'Grumpy', 'Lucy'].
The other keys ('octopi', 'emus', 'plants', and 'other') refer to empty dictionaries.
When we run this code, it will output: 

{
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}



14. Print the top-level keys of life.


To print the top-level keys of the life dictionary, we can use the keys() method to retrieve the keys and then convert them to a list.

life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

top_level_keys = list(life.keys())
print(top_level_keys)

In this code, life.keys() returns a view object containing the top-level keys of the life dictionary. The list() function is used to convert the view object to a list. Finally, the top_level_keys list is printed to the console.

When we run this code, it will output: ['animals', 'plants', 'other']



15. Print the keys for life['animals'].


To print the keys for the 'animals' dictionary within the life dictionary, you can use the keys() method directly on life['animals'].

life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

animals_keys = list(life['animals'].keys())
print(animals_keys)

In this code, life['animals'].keys() retrieves the keys of the 'animals' dictionary within the life dictionary. The keys() method returns a view object of the dictionary's keys. The list() function is then used to convert the view object to a list. Finally, the animals_keys list is printed to the console.

it will output: ['cats', 'octopi', 'emus']
The animals_keys list contains the keys of the 'animals' dictionary within the life dictionary.


16. Print the values for life['animals']['cats']

life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

cats_values = life['animals']['cats']

 it will output: ['Henri', 'Grumpy', 'Lucy']

