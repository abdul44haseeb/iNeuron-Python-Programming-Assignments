1. Set the variable test1 to the string 'This is a test of the emergency text system' and save test1 to a
file named test.txt.

test1 = 'This is a test of the emergency text system'
with open('test.txt', 'w') as file:
    file.write(test1)

In this code, we open a file named 'test.txt' in write mode using the open() function and a with statement. Then, we use the write() method to write the contents of test1 to the file.


2. Read the contents of the file test.txt into the variable test2. Is there a difference between test 1
and test 2?

Read the contents of the file into test2: 
with open('test.txt', 'r') as file:
    test2 = file.read()

Compare test1 and test2:
if test1 == test2:
    print("No difference between test1 and test2.")
else:
    print("There is a difference between test1 and test2.")


Terminal Output : 
PS C:\Users\Abdul Haseeb A\Documents\Python Assignment 17> & "C:/Program Files/Python311/python.exe" "c:/Users/Abdul Haseeb A/Documents/Python Assignment 17/zoo.py"
No difference between test1 and test2.

There is no difference between test1 and test2, it means that the contents of the file 'test.txt' were successfully read into test2, and the values of test1 and test2 are the same.


3. Create a CSV file called books.csv by using these lines:
title,author,year
The Weirdstone of Brisingamen,Alan Garner,1960
Perdido Street Station,China Miéville,2000
Thud!,Terry Pratchett,2005
The Spellman Files,Lisa Lutz,2007
Small Gods,Terry Pratchett,1992

Solution:

import csv

data = [
    ['title', 'author', 'year'],
    ['The Weirdstone of Brisingamen', 'Alan Garner', '1960'],
    ['Perdido Street Station', 'China Miéville', '2000'],
    ['Thud!', 'Terry Pratchett', '2005'],
    ['The Spellman Files', 'Lisa Lutz', '2007'],
    ['Small Gods', 'Terry Pratchett', '1992']
]

with open('books.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)



4. Use the sqlite3 module to create a SQLite database called books.db, and a table called books with
these fields: title (text), author (text), and year (integer).

import sqlite3

# Connect to the database (create if it doesn't exist)
connection = sqlite3.connect('books.db')

# Create a cursor object to execute SQL statements
cursor = connection.cursor()

# Create the 'books' table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        title TEXT,
        author TEXT,
        year INTEGER
    )
''')

# Commit the changes and close the connection
connection.commit()
connection.close()


5. Read books.csv and insert its data into the book table.

import csv
import sqlite3

# Connect to the database
connection = sqlite3.connect('books.db')
cursor = connection.cursor()

# Read the data from the CSV file
with open('books.csv', 'r') as file:
    csv_reader = csv.reader(file)
    next(csv_reader)  # Skip the header row

    # Insert each row of data into the table
    for row in csv_reader:
        title, author, year = row
        cursor.execute("INSERT INTO books (title, author, year) VALUES (?, ?, ?)", (title, author, year))

# Commit the changes and close the connection
connection.commit()
connection.close()



6. Select and print the title column from the book table in alphabetical order.

import sqlite3

# Connect to the database
connection = sqlite3.connect('books.db')
cursor = connection.cursor()

# Execute the query to select the 'title' column in alphabetical order
cursor.execute("SELECT title FROM books ORDER BY title ASC")

# Fetch all the rows returned by the query
rows = cursor.fetchall()

# Print the 'title' values
for row in rows:
    print(row[0])

# Close the cursor and connection
cursor.close()
connection.close()



7. From the book table, select and print all columns in the order of publication.

import sqlite3

# Connect to the database
connection = sqlite3.connect('books.db')
cursor = connection.cursor()

# Execute the query to select all columns in the order of publication
cursor.execute("SELECT * FROM books ORDER BY year ASC")

# Fetch all the rows returned by the query
rows = cursor.fetchall()

# Print all columns
for row in rows:
    print(row)

# Close the cursor and connection
cursor.close()
connection.close()


8. Use the sqlalchemy module to connect to the sqlite3 database books.db that you just made in
exercise 6.

from sqlalchemy import create_engine

# Connect to the SQLite database using SQLAlchemy
engine = create_engine('sqlite:///books.db')

# Test the connection by executing a sample query
result = engine.execute("SELECT * FROM books")
for row in result:
    print(row)

# Close the connection
engine.dispose()



9. Install the Redis server and the Python redis library (pip install redis) on your computer. Create a
Redis hash called test with the fields count (1) and name (&#39;Fester Bestertester&#39;). Print all the fields for
test.

pip install redis
import redis

# Connect to Redis server
r = redis.Redis()

# Create a Redis hash called 'test' with the fields count (1) and name ('Fester Bestertester')
r.hmset('test', {'count': 1, 'name': 'Fester Bestertester'})

# Get all the fields for 'test' and print them
fields = r.hgetall('test')
for field, value in fields.items():
    print(f"{field.decode()}: {value.decode()}")


10. Increment the count field of test and print it.

import redis

# Connect to Redis server
r = redis.Redis()

# Increment the 'count' field of 'test' by 1
r.hincrby('test', 'count', 1)

# Get the updated value of 'count' and print it
count = r.hget('test', 'count')
print(f"Updated count: {count.decode()}")
